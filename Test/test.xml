<?xml version="1.0" encoding="UTF-8"?>
<test>
<list id="2">
<qw>Вопрос 1. Основной функционал работы с потоками сосредоточен в классах из пакета:</qw>
<ans>java.util</ans>
<ans>java.io</ans>
<ans>java.lang</ans>
<ans>java.awt</ans>
</list>
<list id="4">
<qw>Вопрос 2. Применительно к работе с файлами и вводом-выводом поток это - </qw>
<ans>стремительно текущая водная масса</ans>
<ans>обобщение понятия подмногообразия</ans>
<ans>Поточное производство</ans>
<ans>абстракция, которая используется для чтения или записи информации</ans>
</list>
<list id="1">
<qw>Вопрос 3. Объект, из которого можно считать данные, называется</qw>
<ans>потоком ввода</ans>
<ans>потоком вывода</ans>
<ans>потоком</ans>
<ans>ввод</ans>
</list>
<list id="4">
<qw>Вопрос 4. В основе всех классов, управляющих потоками байтов, находятся два абстрактных класса: InputStream и</qw>
<ans>Reader</ans>
<ans>FileInputStrem</ans>
<ans>Bufferedreader</ans>
<ans>OutputStream</ans>
</list>
<list id="4">
<qw>Вопрос 5. Основной метод класса InputStream: int read() - </qw>
<ans>возвращает количество байтов, доступных для чтения в потоке</ans>
<ans>пропускает в потоке при чтении некоторое количество байт, которое равно number</ans>
<ans>закрывает поток</ans>
<ans>возвращает целочисленное представление следующего байта в потоке. Когда в потоке не останется доступных для чтения байтов, данный метод возвратит число -1</ans>
</list>
<list id="1">
<qw>Вопрос 6. Основной метод класса OutputStream: void flush() - </qw>
<ans>очищает буфер вывода, записывая все его содержимое</ans>
<ans>закрывает поток</ans>
<ans>записывает в выходной поток один байт, который представлен целочисленным параметром b</ans>
<ans>записывает в выходной поток массив байтов buffer</ans>
</list>
<list id="2">
<qw>Вопрос 7. Абстрактный класс Reader - </qw>
<ans>является базовым классом для всех классов</ans>
<ans>предоставляет функционал для чтения текстовой информации</ans>
<ans>является базовым для всех классов, управляющих байтовыми потоками ввода</ans>
<ans>определяет функционал для всех символьных потоков вывода</ans>
</list>
<list id="3">
<qw>Вопрос 8. Класс FileOutputStream предназначен для </qw>
<ans>считывания данных из файла</ans>
<ans>генерации исключения</ans>
<ans>записи байтов в файл</ans>
<ans>закрывания потока</ans>
</list>
<list id="3">
<qw>Вопрос 9. При завершении работы с потоком его надо закрыть с помощью метода </qw>
<ans>read()</ans>
<ans>write(String str)</ans>
<ans>close()</ans>
<ans>read(CharBuffer buffer)</ans>
</list>
<list id="4">
<qw>Вопрос 10. Класс ByteArrayInputStream представляет</qw>
<ans>выходной поток, использующий массив байтов в качестве места вывода</ans>
<ans>метод</ans>
<ans>класс</ans>
<ans>входной поток, использующий в качестве источника данных массив байтов</ans>
</list>
<list id="1">
<qw>Вопрос 11. Для оптимизации операций ввода-вывода используются </qw>
<ans>буферизуемые потоки</ans>
<ans>потоки</ans>
<ans>стандартные потоки</ans>
<ans>методы</ans>
</list>
<list id="2">
<qw>Вопрос 12. Класс PrintStream - это именно тот класс, который используется для вывода на </qw>
<ans>фрейм</ans>
<ans>консоль</ans>
<ans>панель</ans>
<ans>экран</ans>
</list>
<list id="3">
<qw>Вопрос 13.Для вывода информации в выходной поток PrintStream использует метод - </qw>
<ans>close()</ans>
<ans>System.out.println()</ans>
<ans>println()</ans>
<ans>read()</ans>
</list>
<list id="3">
<qw>Вопрос 14. Класс DataOutputStream представляет поток вывода и предназначен для записи данных примитивных типов. Для записи целого числа предназначен метод -  </qw>
<ans>writeChar(int v)</ans>
<ans>writeLong(long v)</ans>
<ans>writeByte(int v)</ans>
<ans>writeShort(int v)</ans>
</list>
<list id="1">
<qw>Вопрос 15. Класс DataInputStream</qw>
<ans>считывает из потока данные примитивных типов</ans>
<ans>считывает из потока данные всех типов</ans>
<ans>записывает данные примитивных типов</ans>
<ans>такого класса не существует</ans>
</list>
<list id="2">
<qw>Вопрос 16. Байтовый поток ввода из файла</qw>
<ans>FileReader</ans>
<ans>FileInputStream</ans>
<ans>InputStreamReader</ans>
<ans>BufferedReader</ans>
</list>
<list id="3">
<qw>Вопрос 17. Принимает на вход поток байт и кодировщик, с помощью которого он преобразует поток байт в поток символов</qw>
<ans>FileReader</ans>
<ans>FileInputStream</ans>
<ans>InputStreamReader</ans>
<ans>BufferedReader</ans>
</list>
<list id="4">
<qw>Вопрос 18. На вход он получает поток символов, а на выходе позволяет читать его по строчкам </qw>
<ans>FileReader</ans>
<ans>FileInputStream</ans>
<ans>InputStreamReader</ans>
<ans>BufferedReader</ans>
</list>
<list id="2">
<qw>Вопрос 19. Для создания объекта FileOutputStream используется конструктор</qw>
<ans>принимающий в качестве параметра дробное число</ans>
<ans>принимающий в качестве параметра путь к файлу для записи</ans>
<ans>принимающий в качестве параметра целое число</ans>
<ans>принимающий в качестве параметра строку</ans>
</list>
<list id="3">
<qw>Вопрос 20. Если файл не может быть открыт, например, по указанному пути такого файла не существует, то генерируется исключение</qw>
<ans>NullPointerException</ans>
<ans>ArithmeticException</ans>
<ans>FileNotFoundException</ans>
<ans>IllegalThreadStateException</ans>
</list>
</test>